{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is inside","text":"<p>Welcome to my personal blog where I share my passion for Java and Java Spring Boot technology. As a developer, I am constantly exploring new ways to build high-performance and scalable applications, and Java has been my go-to language for its versatility and robustness. In addition, I have found that Spring Boot provides a streamlined and efficient framework for building modern web applications. Through this blog, I aim to share my experiences, insights, and best practices with fellow developers and enthusiasts, and I look forward to engaging with you on this exciting journey.</p>"},{"location":"about-me/","title":"The past, present and future","text":""},{"location":"about-me/#about-me","title":"About Me","text":"<p>I have over 2 year of professional experience as a Backend Java/J2EE Developer and over 7 years of experience in programming with diversified exposure in all the phases of the Software Development Life Cycle using Spring Boot, Spring MVC, Spring AOP, Spring Data, Spring Security, Hibernate ORM, and Microservice as well as other web development technologies including RabbitMQ, WebSockets, WebHooks, OAuth2, Gateway, Feign, Eureka, JUnit, Mockito, docker, HTML/CSS, javascript and so on.</p>"},{"location":"about-me/#a-little-history","title":"A little history","text":"<p>I created my personal tech blog to share my experiences, insights, and best practices with others who are interested in technology. As a software developer, I have learned a great deal through my own experiences and by collaborating with others. Through my blog, I hope to give back to the community by sharing what I have learned, and by offering guidance to those who may be just starting out on their own tech journeys. I aim to cover a wide range of topics, including programming languages, frameworks, design patterns, and more. By sharing my knowledge, I hope to inspire others to learn, grow, and achieve their goals in the tech industry. I'm excited to embark on this new journey, and I look forward to engaging with my readers as we explore the world of technology together.</p>"},{"location":"me/","title":"Me","text":"<p>Welcome to My Blog</p>"},{"location":"projects/","title":"Projects","text":""},{"location":"projects/#1-youtube-comments-to-pngs","title":"1. Youtube Comments To PNGs","text":"<p>Demo Link</p> <p></p> More Images <p></p> <p></p> <p></p> <p></p>"},{"location":"projects/#2-tab-manager-for-chrome-extension","title":"2. Tab Manager for Chrome Extension","text":"<p>Chrome Web Store</p>"},{"location":"projects/#3-qidian-rebate-information-exchange-board","title":"3. Qidian Rebate Information Exchange Board","text":""},{"location":"projects/#4-avalon-online-game","title":"4. Avalon Online Game","text":"<p>Website</p>"},{"location":"projects/#5-recipe-scale-calculator","title":"5. Recipe Scale Calculator","text":"<p>Demo Link</p>"},{"location":"projects/#6-zoom-attendance-taker","title":"6. Zoom Attendance Taker","text":"<p>GitHub</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#angular","title":"Angular","text":"<ul> <li>Angular Deployment</li> <li>Material Design</li> </ul>"},{"location":"tags/#angular-material-design","title":"Angular Material Design","text":"<ul> <li>Material Design</li> </ul>"},{"location":"tags/#bootstrap","title":"Bootstrap","text":"<ul> <li>Material Design</li> </ul>"},{"location":"tags/#cicd","title":"CI/CD","text":"<ul> <li>CI/CD</li> </ul>"},{"location":"tags/#deployment","title":"Deployment","text":"<ul> <li>Angular Deployment</li> </ul>"},{"location":"tags/#filter","title":"Filter","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#git","title":"Git","text":"<ul> <li>Git</li> </ul>"},{"location":"tags/#gitpod","title":"GitPod","text":"<ul> <li>GitPod</li> </ul>"},{"location":"tags/#ide","title":"IDE","text":"<ul> <li>GitPod</li> </ul>"},{"location":"tags/#jakarta-ee","title":"Jakarta EE","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#java","title":"Java","text":"<ul> <li>Java 8 Features</li> <li>Java SE Basic</li> <li>Java Full Stack Roadmap</li> </ul>"},{"location":"tags/#java-8","title":"Java 8","text":"<ul> <li>Java 8 Features</li> </ul>"},{"location":"tags/#java-se","title":"Java SE","text":"<ul> <li>Java SE Basic</li> </ul>"},{"location":"tags/#mac","title":"Mac","text":"<ul> <li>PuTTY</li> </ul>"},{"location":"tags/#oca","title":"OCA","text":"<ul> <li>Java SE Basic</li> </ul>"},{"location":"tags/#putty","title":"PuTTY","text":"<ul> <li>PuTTY</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Python Full Stack Roadmap</li> </ul>"},{"location":"tags/#roadmap","title":"Roadmap","text":"<ul> <li>Java Full Stack Roadmap</li> <li>Python Full Stack Roadmap</li> </ul>"},{"location":"tags/#ssh","title":"SSH","text":"<ul> <li>PuTTY</li> </ul>"},{"location":"tags/#servlet","title":"Servlet","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#spring-boot","title":"Spring Boot","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#spring-security","title":"Spring Security","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#tool","title":"Tool","text":"<ul> <li>GitPod</li> <li>PuTTY</li> </ul>"},{"location":"tags/#bash","title":"bash","text":"<ul> <li>Shell</li> </ul>"},{"location":"tags/#zsh","title":"zsh","text":"<ul> <li>Shell</li> </ul>"},{"location":"angular/deployment/","title":"Angular Deployment","text":"","tags":["Angular","Deployment"]},{"location":"angular/deployment/#simple-deployment","title":"Simple Deployment","text":"<ol> <li> <p>Build the application</p> <pre><code>ng build\n</code></pre> </li> <li> <p>Copy the <code>/dist</code> folder to the server</p> </li> <li> <p>Configure the server to redirect requests for missing files to index.html.</p> <ul> <li>Nginx Add <code>try_files</code> in the config <pre><code>server {\n    listen 80;\n    server_name angular.zhaobg.com;\n    root /xxx/xxx/; # angular dist\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n}\n</code></pre></li> </ul> </li> </ol>","tags":["Angular","Deployment"]},{"location":"angular/design/","title":"Material Design","text":"","tags":["Angular","Angular Material Design","Bootstrap"]},{"location":"angular/design/#angular-material-design","title":"Angular Material Design","text":"<p>Angular Material is a set of high-quality UI components that implement Google's Material Design. It's built with and for Angular. The library is great and keeps getting better with time. </p>","tags":["Angular","Angular Material Design","Bootstrap"]},{"location":"angular/design/#using-angular-material-design-with-bootstrap","title":"Using Angular Material Design with Bootstrap","text":"<p>Angular Material Design lacks some important features like a decent layout (grid) system, a CSS reset, and some CSS utilities that ease our life as developers.</p> <ol> <li> <p>Install Angular Material and Bootstrap</p> <pre><code>npm install @angular/material\nnpm install bootstrap\n</code></pre> </li> <li> <p>Adding Bootstrap to the style</p> src/style.scss<pre><code>// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)\n@import \"../node_modules/bootstrap/scss/functions\";\n\n// 2. Include any default variable overrides here\n@import \"styles/variables\";\n\n// 3. Include remainder of required Bootstrap stylesheets\n@import \"../node_modules/bootstrap/scss/variables\";\n\n// 4. Include any default map overrides here\n@import \"styles/maps\";\n\n// 5. Include remainder of required parts\n@import \"../node_modules/bootstrap/scss/maps\";\n@import \"../node_modules/bootstrap/scss/mixins\";\n@import \"../node_modules/bootstrap/scss/root\";\n@import \"../node_modules/bootstrap/scss/utilities\";\n@import \"../node_modules/bootstrap/scss/reboot\";\n\n// 6. Optionally include any other parts as needed\n@import \"../node_modules/bootstrap/scss/type\";\n@import \"../node_modules/bootstrap/scss/images\";\n@import \"../node_modules/bootstrap/scss/containers\";\n@import \"../node_modules/bootstrap/scss/grid\";\n@import \"../node_modules/bootstrap/scss/helpers\";\n\n// 7. Optionally include utilities API last to generate classes based on the Sass map in `_utilities.scss`\n@import \"../node_modules/bootstrap/scss/utilities/api\";\n\n// 8. Add additional custom code here\n@import \"styles/reset\"\n</code></pre> </li> <li> <p>Fixing Reboot issues</p> <p>The reset.scss Sass file allows you to override some of the Bootstrap styles you don't want. That's why you've added it after all Bootstrap imports. For example,</p> reset.scss<pre><code>a {\n&amp;.mat-button, &amp;.mat-raised-button, &amp;.mat-fab, &amp;.mat-mini-fab, &amp;.mat-list-item {\n    &amp;:hover {\n    color: currentColor\n    }\n}\n}\n</code></pre> </li> </ol>","tags":["Angular","Angular Material Design","Bootstrap"]},{"location":"cicd/cicd/","title":"What is CI/CD","text":"<p>continuous integration, continuous delivery, and continuous deployment</p> <p>Continuous integration (CI): </p> <p>A software development practice in which developers regularly merge (integrate) their code changes into a central repository, and automated builds and tests are run This helps catch integration issues early and ensures that the codebase is always in a deployable state.</p> <p></p>","tags":["CI/CD"]},{"location":"java/java-8/","title":"Java 8 Features","text":"<p>Java 8 introduced several new features, some of the most significant ones are: Functional Interface and Lambda Expressions, Stream API, Default methods in interface, Optional class.</p>","tags":["Java","Java 8"]},{"location":"java/java-8/#functional-interface","title":"Functional Interface","text":"<p>Functional interface is an interface that has only one abstract method. This means that it provides a single behavior or functionality, which can be implemented by any class that implements the interface.</p> <p>In Java 8 and later versions, functional interfaces are annotated with the <code>@FunctionalInterface</code> annotation to indicate that they are intended to be used as functional interfaces. This annotation is optional, but it helps to ensure that the interface has only one abstract method and can be used in functional programming constructs such as lambda expressions and method references.</p> <p>e.g. Consumer, Supplier, Function, and Predicate</p>","tags":["Java","Java 8"]},{"location":"java/java-8/#default-and-static-methods-for-interfaces","title":"Default and static methods for interfaces","text":"<p>In Java 8, the concept of default and static methods for interfaces was introduced. These methods provide a way to add new functionality to existing interfaces without breaking backward compatibility. Prior to Java 8, an interface could only contain abstract methods and constants.</p>","tags":["Java","Java 8"]},{"location":"java/java-8/#default-vs-static-methods","title":"Default vs Static methods","text":"<ul> <li>Default methods are used to add new functionality to an existing interface, while static methods are used to provide utility methods that are not tied to any specific instance of the interface. </li> <li>Default methods can be overridden by any implementing class, while static methods can only be accessed using the interface name.</li> </ul>","tags":["Java","Java 8"]},{"location":"java/java-8/#widely-used-functional-interfaces","title":"Widely Used Functional Interfaces","text":"","tags":["Java","Java 8"]},{"location":"java/java-8/#consumer","title":"Consumer","text":"<p>The Consumer interface represents an operation that takes a single input and performs some action on it, without returning any result.</p> Methods <ul> <li>abstract <code>accept(T t)</code>: takes an argument of type T and returns void.</li> <li><code>andThen(Consumer&lt;? super T&gt; after)</code>: allows chaining two Consumer operations together.</li> </ul>","tags":["Java","Java 8"]},{"location":"java/java-8/#supplier","title":"Supplier","text":"<p>The Supplier interface is used to represent any operation that generates a value without taking any input.</p> Methods <ul> <li>abstract <code>get()</code>: takes no arguments and returns a result of a specified type.</li> </ul>","tags":["Java","Java 8"]},{"location":"java/java-8/#function","title":"Function","text":"<p>The Function interface represents a function that takes an argument of type <code>T</code> and produces a result of type <code>R</code>. The argument and result can be different types</p> Methods <ul> <li>abstract <code>apply(T t)</code>, takes an argument of type T and returns a result of type R.</li> <li><code>andThen(Function&lt;? super R, ? extends V&gt; after)</code>: Returns a composed function that first applies the current function to the input, and then applies the after function to the result.</li> <li><code>compose(Function&lt;? super V, ? extends T&gt; before)</code>: Returns a composed function that first applies the before function to the input, and then applies the current function to the result.</li> <li><code>identity()</code>: Returns a function that always returns its input argument.</li> </ul>","tags":["Java","Java 8"]},{"location":"java/java-8/#predicate","title":"Predicate","text":"<p>The Predicate interface represents a boolean-valued function of one argument.</p> Methods <ul> <li>abstract <code>test(T t)</code>: takes an argument of type T and returns a boolean value.</li> <li><code>and(Predicate&lt;? super T&gt; other)</code>: Returns a composed predicate that represents a logical AND of this predicate and another predicate.</li> <li><code>or(Predicate&lt;? super T&gt; other)</code>: Returns a composed predicate that represents a logical OR of this predicate and another predicate.</li> <li><code>negate()</code>: Returns a predicate that represents the negation of this predicate.</li> </ul>","tags":["Java","Java 8"]},{"location":"java/java-8/#lambda-expressions","title":"Lambda Expressions","text":"<p>A lambda expression is a concise way to represent an anonymous function that can be passed around as a value. It is used to implement functional interfaces.</p> <pre><code>Runnable runnable = () -&gt; System.out.println(\"Hello, world!\");\n</code></pre>","tags":["Java","Java 8"]},{"location":"java/java-8/#method-reference","title":"Method Reference","text":"<p>Java 8 that allows you to refer to an existing method by its name instead of writing a lambda expression. There are four types of method references:</p> <ol> <li> <p>Reference to a static method: using the class name followed by the method name. <pre><code>// Using lambda expression\nArrays.sort(names, (a, b) -&gt; MyUtils.compareByName(a, b));\n\n// Using method reference\nArrays.sort(names, MyUtils::compareByName);\n</code></pre></p> </li> <li> <p>Reference to an instance method of an object: using the object reference followed by the method name. <pre><code>// Using lambda expression\nButton button = new Button();\nbutton.setOnAction((event) -&gt; this.handleButtonClick(event));\n\n// Using method reference\nButton button = new Button();\nbutton.setOnAction(this::handleButtonClick);\n</code></pre></p> </li> <li> <p>Reference to an instance method of an arbitrary object of a particular type: using the type name followed by the method name. <pre><code>// Using lambda expression\nList&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nnames.sort((a, b) -&gt; a.compareToIgnoreCase(b));\n\n// Using method reference\nList&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nnames.sort(String::compareToIgnoreCase);\n</code></pre></p> </li> <li> <p>Reference to a constructor: using the new keyword followed by the class name. <pre><code>// Using lambda expression\nSupplier&lt;List&lt;String&gt;&gt; supplier = () -&gt; new ArrayList&lt;&gt;();\n\n// Using method reference\nSupplier&lt;List&lt;String&gt;&gt; supplier = ArrayList::new;\n</code></pre></p> </li> </ol>","tags":["Java","Java 8"]},{"location":"java/java-8/#stream-api","title":"Stream API","text":"<p>The Stream API is used to process collections of objects.</p> <p>A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.</p>","tags":["Java","Java 8"]},{"location":"java/java-8/#main-features","title":"Main Features","text":"<ul> <li>A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.</li> <li>Streams don\u2019t change the original data structure, they only provide the result as per the pipelined methods.</li> <li>Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. Terminal operations mark the end of the stream and return the result.</li> </ul>","tags":["Java","Java 8"]},{"location":"java/java-8/#intermediate-operations-vs-terminal-operations","title":"Intermediate Operations vs Terminal Operations","text":"<p>Intermediate operations return a stream as a result and terminal operations return non-stream values like primitive or object or collection or may not return anything. e.g. <code>filter()</code>, <code>map()</code>, <code>flatMap()</code>, <code>distinct()</code>, and <code>sorted()</code>.</p> <p>Intermediate operations are lazily loaded. When you call intermediate operations, they are actually not executed. They are just stored in the memory and executed when the terminal operation is called on the stream. e.g. <code>forEach()</code>, <code>reduce()</code>, <code>collect()</code>, and <code>count()</code>.</p>","tags":["Java","Java 8"]},{"location":"java/java-8/#each-intermediate-operation-is-lazily-executed","title":"Each intermediate operation is lazily executed","text":"<p>In the below example, the <code>filter()</code> method is an intermediate operation. If we run this code without any terminal operations, nothing will be printed to the console: <pre><code>List&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nStream&lt;String&gt; filteredNamesStream = names.stream()\n    .filter(name -&gt; {\n        System.out.println(\"Filtering \" + name);\n        return name.startsWith(\"A\");\n    });\n</code></pre></p>","tags":["Java","Java 8"]},{"location":"java/java-8/#optional-class","title":"Optional class","text":"<p>Optional is a container object used to contain not-null objects. Optional object is used to represent <code>null</code> with absent value.</p> <p>This class has various utility methods to facilitate code to handle values as \u2018available\u2019 or \u2018not available\u2019 instead of checking null values.</p> <p>Useful for circumventing handling of <code>NullPointerException</code></p> <p> Edit on Feb 24th, 2023</p> <p> Created on Oct 13rd, 2022 </p>","tags":["Java","Java 8"]},{"location":"java/java-basic/","title":"Java Building Blocks","text":"<p>Topics: Scopes of variables, structure of a Java class, main method, import java packages, platform independence, object orientation, encapsulation</p> <p>Topics: objects, classes, fields, methods, and comments</p>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#objects-and-classes","title":"Objects and Classes","text":"<p>In Java programs, classes are the basic building blocks. </p> <p>When you define a class, you are creating a blueprint or a template for an object. A class contains all the properties (attributes or fields) and behaviors (methods) that an object of that class will have.</p> <p>To actually use the class, you need to create an instance of that class, which is also called an object. An object is a runtime instance of a class in memory. All the various objects of all the different classes represent the state of your program.</p>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#class-vs-object","title":"Class vs Object","text":"<p>A class defines the properties and behaviors that objects of that class will have, while an object is an instance of a class that has its own unique state.</p> <ul> <li>Classes are the basic building blocks.</li> <li>An object is a runtime instance of a class in memory.</li> </ul>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#class-vs-file","title":"Class vs File","text":"","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#requirements","title":"Requirements","text":"<ul> <li>You can even put two classes in the same file. When you do so, at most one of the classes in the file is allowed to be public.</li> <li>If you do have a public class, it needs to match the filename, including case.</li> </ul> Animal.java<pre><code>public class Animal {\n  private String name;\n}\nclass Animal2 {\n}\n</code></pre>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#fields-and-methods","title":"Fields and Methods","text":"<p>Two primary elements: methods (functions or procedures), and fields (variables). Together these are called the members of the class. Variables hold the state of the program, and methods operate on that state.</p> <p>What is a method signature?</p> <p>A method signature refers to the part of the method declaration that specifies the method's name, return type, and parameters. In other words, the method signature defines the inputs and outputs of the method.</p>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#comment","title":"Comment","text":"<p>There are three types of comments in Java.</p> <ol> <li> <p>single-line comment: <pre><code>// comment until end of line\n</code></pre></p> </li> <li> <p>multiple-line comment / multiline comment <pre><code>/* Multiple\n* line comment\n*/\n</code></pre></p> </li> <li> <p>Javadoc comment: <pre><code>/**\n* Javadoc multiple-line comment\n* @author Kason\n*/\n</code></pre></p> </li> </ol> Example: Is it a single-line or a multiline comment? <pre><code>/*\n* // anteater\n*/\n// bear\n// // cat\n// /* dog */\n/* elephant */\n/*\n* /* ferret */\n*/\n</code></pre> <ul> <li> <p>The 2nd line <code>anteater</code> is in a multiline comment. Everything between / and / is part of a multiline comment\u2014even if it includes a single-line comment within it! </p> </li> <li> <p>The 3rd line <code>bear</code> is the basic single-line comment. <code>cat</code> and <code>dog</code> are also single-line comments. Everything from // to the end of the line is part of the comment, even if it is another type of comment. </p> </li> <li> <p>The 8th line <code>elephant</code> is the basic multiline comment.</p> </li> <li> <p>The 10th line <code>ferret</code> doesn\u2019t compile. Everything from the first <code>/*</code> to the first <code>*/</code> is part of the comment, which means the compiler sees something like this: <code>/* */ */</code> And there is an extra */. </p> </li> </ul>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#java-main-method","title":"Java <code>Main()</code> Method","text":"<p>Java doesn\u2019t need to create an object to call the main() method. The JVM does this, more or less, when loading the class name given to it.</p> What is JVM, JRE or JDK <ul> <li> <p>Java Virtual Machine (JVM)   It is a software component that executes Java bytecode. When you write Java code and compile it, the resulting <code>.class</code> file contains bytecode that can be executed by any JVM, regardless of the underlying hardware or operating system, so Java is known as a portable language.</p> </li> <li> <p>Java Runtime Environment (JRE)   It is a package that includes the JVM, along with a set of libraries and other components needed to run Java applications. The JRE is used to run Java applications on end-user machines.</p> </li> <li> <p>Java Development Kit (JDK)   It is a package that includes the JRE, along with additional tools and utilities needed to develop Java applications. These include a compiler, debugger, and various development libraries. </p> </li> </ul> <p>Here is an example of main() method to print the first two arguments passed in:</p> Example.java<pre><code>public class Example {\n  public static void main(String[] args) {\n    System.out.println(args[0]);\n    System.out.println(args[1]);\n  } \n}\n</code></pre> <p>To compile and execute this code</p> <pre><code>$ javac Example.java\n$ java Example Hello World\n</code></pre>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#access-modifier","title":"Access Modifier","text":"<p><code>public</code>: declares this method\u2019s level of exposure to potential callers in the program</p>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#static-keyword","title":"<code>static</code> keyword","text":"<p>The keyword <code>static</code> binds a method to its class so it can be called by just the class name without creating an object.</p>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#return-type","title":"return type","text":"<p>The keyword <code>void</code> represents the return type. A method that returns no data returns control to the caller silently. In general, it\u2019s good practice to use void for methods that change an object\u2019s state.</p>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#parameter-list","title":"parameter list","text":"","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#package-declarations-and-imports","title":"Package Declarations and Imports","text":"<ul> <li>When using wildcards <code>*</code>, Every class in the package is available to the program when Java complies it, but it does not import child packages, fields or methods. It only imports classes.</li> <li>You might think that including so many classes slows down your program, but it doesn\u2019t. The compiler figures out what\u2019s actually needed.</li> <li>Naming Conflicts: When the class is found in multiple packages, Java gives you the compiler error</li> </ul> <pre><code>import java.util.*;\nimport java.sql.*; // DOES NOT COMPILE: The type Date is ambiguous\n</code></pre>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#constructors","title":"Constructors","text":"<ul> <li>the name of the constructor matches the name of the class, and there\u2019s not return type</li> <li>you don\u2019t have to code a constructor\u2014the compiler will supply a \u201cdo nothing\u201d default constructor for you</li> </ul>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#order-of-initialization","title":"Order of Initialization","text":"<ul> <li>Fields and instance initializer blocks are run in the order in which they appear in the file.</li> <li>The constructor runs after all fields and instance initializer blocks have run.</li> </ul>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#numeric-literal","title":"Numeric Literal","text":"<p>a feature added in Java 7. You can have underscores in numbers to make them easier to read:</p> <pre><code>int million2 = 1_000_000;\n</code></pre> <ul> <li>You can add underscores anywhere except at the beginning of a literal, the end of a literal, right before a decimal point, or right after a decimal point</li> </ul>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#difference-between-primitive-types-and-reference","title":"Difference between primitive types and reference","text":"<ul> <li>reference types can be assigned null,  but primitive types will give you a compiler error</li> <li>primitives do not have methods.</li> <li>primitive types have lowercase type names</li> </ul>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#declaring-multiple-variables","title":"Declaring Multiple Variables","text":"<ul> <li>If you want to declare multiple variables in the same statement, they must share the same type declaration and not repeat it.</li> </ul> <pre><code>double d1, double d2; // not legal\ndouble d1, d2; // legal\n</code></pre>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#identifiers","title":"Identifiers","text":"<ul> <li>The name must begin with a letter or the symbol <code>$</code> or <code>_</code>.</li> <li>Subsequent characters may also be numbers.</li> <li>You cannot use the same name as a Java reserved word.</li> </ul>","tags":["Java","Java SE","OCA"]},{"location":"java/java-basic/#default-initialization-of-variables","title":"Default Initialization of Variables","text":"<ul> <li>A local variable is a variable defined within a method. Local variables must be initialized before use.</li> <li>Variables that are not local variables are known as instance variables or class variables. (or fields). Instance and class variables do not require you to initialize them. As soon as you declare these variables, they are given a default value</li> </ul> <p> Edit on Feb 24th, 2023</p> <p> Created on Oct 13rd, 2022 </p>","tags":["Java","Java SE","OCA"]},{"location":"roadmap/java-full-stack/","title":"Java Full Stack Roadmap","text":"","tags":["Java","Roadmap"]},{"location":"roadmap/python-full-stack/","title":"Python Full Stack Roadmap","text":"<p>As a Full Stack Python Web Developer, you need to be proficient in various programming languages, web frameworks, databases, and deployment tools.</p>","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#1-learn-python","title":"1. Learn Python","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#2-python-web-frameworks","title":"2. Python Web Frameworks","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#3-databases","title":"3. Databases","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#4-frontend","title":"4. Frontend","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#5-web-servers-and-deployment","title":"5. Web Servers and Deployment","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#6-advanced-backend","title":"6. Advanced Backend","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#7-advanced-frontend","title":"7. Advanced Frontend","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#8-testing","title":"8. Testing","text":"","tags":["Python","Roadmap"]},{"location":"roadmap/python-full-stack/#9-devops-and-cicd","title":"9. DevOps and CICD","text":"","tags":["Python","Roadmap"]},{"location":"spring-boot/spring-security/","title":"Spring Security","text":"","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#servlet-and-servlet-container","title":"Servlet and Servlet Container","text":"<p>Servlets are a component of the Java EE framework used for web development. They are basically Java programs that run inside the boundaries of a container. On the whole, they are responsible for accepting a request, processing it, and sending a response back using the HTTP protocol. </p> <p>A servlet container, also known as a web container or a servlet engine, is a component of a web server or application server that manages the lifecycle of servlets. The servlet container is responsible for loading, initializing, and invoking servlets, as well as managing their threads and resources. It also provides the necessary infrastructure for servlets to communicate with clients using the HTTP protocol, such as managing cookies and handling sessions.</p> <p>Apache Tomcat is a long-lived, open source Java servlet container that implements core Java enterprise (now Jakarta EE) specifications</p>","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#dispatcher-servlet","title":"Dispatcher Servlet","text":"","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#dispatcher-servlet-vs-servlet-container","title":"Dispatcher Servlet vs Servlet Container","text":"<p>The Dispatcher Servlet is a standard servlet that is responsible for dispatching requests to the appropriate handler servlet objects based on URL mapping. Its name comes from its role as a dispatcher. Although not a Spring-specific feature, the Spring Framework uses it extensively to implement its mechanisms.</p> <p>Like any other servlet, the Dispatcher Servlet is deployed within a Servlet Container</p>","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#filter","title":"Filter","text":"","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#what-is-onceperrequestfilter","title":"What Is OncePerRequestFilter?","text":"<p>A filter can be executed before or after servlet processing, and if a request is forwarded to another servlet using the <code>RequestDispatcher</code>, it's possible for the same filter to be invoked multiple times. However, in certain scenarios, we may want to ensure that a specific filter is invoked only once per request. This is a common requirement when working with Spring Security, where certain authentication actions should only occur once per request.</p> <p>To ensure a filter is only executed once per request, we can extend the <code>OncePerRequestFilter</code> provided by Spring. This abstract class guarantees that the filter's <code>doFilter()</code> method is executed only once per request, even if the filter is configured multiple times in the filter chain.</p>","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#filter-vs-interceptor","title":"Filter vs Interceptor","text":"<p>Spring Interceptors are similar to Servlet Filters. An interceptor just allows custom pre-processing with the option of prohibiting the execution of the handler itself, and custom post-processing, having access to Spring Context. Interceptors will only execute after Filters.</p> Methods <ul> <li><code>preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</code>:    This is used to perform operations before sending the request to the controller. This method should return true to return the response to the client.</li> <li><code>postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</code>:    This is used to perform operations before sending the response to the client.</li> <li><code>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception)</code>:    This is used to perform operations after completing the request and response.</li> </ul>","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#webfilter-and-servletcomponentscan","title":"WebFilter and ServletComponentScan","text":"<p>The <code>ServletComponentScan</code> annotation is necessary to enable scanning of Servlet components, including <code>@WebServlet</code>, <code>@WebFilter</code>, and <code>@WebListener</code> in a Spring Boot application and register them with the Servlet Container.</p>","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#spring-security","title":"Spring Security","text":"","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#configuration","title":"Configuration","text":"","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#1-component-based-security-configuration-recommanded","title":"1. Component-based security configuration (Recommanded)","text":"<p>Spring framework encourage developers to move towards a component-based security configuration.</p> SecurityConfig.java<pre><code>@Configuration\npublic class SecurityConfiguration {\n\n    @Bean\n    public AuthenticationManager authenticationManagerBean(HttpSecurity http) throws Exception {\n        // configure AuthenticationManager...\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        // configure HTTP security...\n    }\n\n    @Bean\n    public WebSecurityCustomizer webSecurityCustomizer() {\n        // configure Web security...\n    }\n\n}\n</code></pre> Detailed Example SecurityConfig.java<pre><code>@Configuration\npublic class SecurityConfig {\n\n    private UserService userService;\n    private PasswordEncoder encoder;\n    private JwtFilter jwtFilter;\n\n    @Autowired\n    public SecurityConfig(UserService userService, PasswordEncoder encoder, JwtFilter jwtFilter) {\n        this.userService = userService;\n        this.encoder = encoder;\n        this.jwtFilter = jwtFilter;\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManagerBean(HttpSecurity http) throws Exception {\n        AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);\n        authenticationManagerBuilder.userDetailsService(userService).passwordEncoder(encoder);\n        return authenticationManagerBuilder.build();\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf().disable()\n            .addFilterAfter(jwtFilter, UsernamePasswordAuthenticationFilter.class)\n            .authorizeRequests()\n            .antMatchers(\"/api/login\").permitAll()\n            .antMatchers(\"/api/getAll\", \"/content/get/*\").hasAuthority(\"read\")\n            .antMatchers(\"/api/create\").hasAuthority(\"write\")\n            .antMatchers(\"/api/update\").hasAuthority(\"update\")\n            .antMatchers(\"/api/delete/*\").hasAuthority(\"delete\")\n            .anyRequest()\n            .authenticated();\n\n        return http.build();\n    }\n\n    @Bean\n    public WebSecurityCustomizer webSecurityCustomizer() {\n        return (web) -&gt; web.ignoring().antMatchers(\"/images/**\", \"/js/**\", \"/webjars/**\");\n    }\n}\n</code></pre>","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"spring-boot/spring-security/#2-extended-websecurityconfigureradapter-class","title":"2. Extended <code>WebSecurityConfigurerAdapter</code> class","text":"<p>Only if you are using Spring Security version 5.6.5 or older, or Spring Boot version 2.6.8 or older</p> <p>The type <code>WebSecurityConfigurerAdapter</code> is deprecated</p> <p><code>WebSecurityConfigurerAdapter</code> class is deprecated after Spring Security 5.7.1 or Spring Boot 2.7.0, and the reason is that Spring framework encourage users to move towards a component-based security configuration. Read More</p> SecurityConfig.java<pre><code>@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Override\n    @Bean\n    protected AuthenticationManager authenticationManager() throws Exception {\n        return super.authenticationManager();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        // configure HTTP security...\n\n    }\n\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n\n        // configure Web security...\n\n    }      \n}\n</code></pre> Detailed Example SecurityConfig.java<pre><code>@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    private UserService userService;\n    private PasswordEncoder encoder;\n    private JwtFilter jwtFilter;\n\n    @Autowired\n    public SecurityConfig(UserService userService, PasswordEncoder encoder, JwtFilter jwtFilter) {\n        this.userService = userService;\n        this.encoder = encoder;\n        this.jwtFilter = jwtFilter;\n    }\n\n    @Bean\n    public DaoAuthenticationProvider daoAuthenticationProvider(){\n        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n        provider.setUserDetailsService(userService);\n        provider.setPasswordEncoder(encoder);\n        return provider;\n    }\n\n    @Override\n    @Bean\n    protected AuthenticationManager authenticationManager() throws Exception {\n        return super.authenticationManager();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .csrf().disable()\n            .addFilterAfter(jwtFilter, UsernamePasswordAuthenticationFilter.class)\n            .authorizeRequests()\n            .antMatchers(\"/api/login\").permitAll()\n            .antMatchers(\"/api/getAll\", \"/content/get/*\").hasAuthority(\"read\")\n            .antMatchers(\"/api/create\").hasAuthority(\"write\")\n            .antMatchers(\"/api/update\").hasAuthority(\"update\")\n            .antMatchers(\"/api/delete/*\").hasAuthority(\"delete\")\n            .anyRequest()\n            .authenticated();\n    }\n\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        web.ignoring().antMatchers(\"/images/**\", \"/js/**\", \"/webjars/**\");\n    }\n}\n</code></pre>","tags":["Spring Boot","Spring Security","Filter","Jakarta EE","Servlet"]},{"location":"tool/git/","title":"Git","text":"<p>Git is a popular version control system(VCS) that is used to track changes to files and directories over time. It has become the de facto standard for version control and is widely used in software development, especially for open-source projects. It is supported by many hosting services, such as GitHub, GitLab, and Bitbucket, which provide additional features such as code reviews, issue tracking, and continuous integration (CI).</p> Benefit of Git <ul> <li> <p>Fast Speed:    Git uses SHA compression, which makes it very fast.</p> </li> <li> <p>Merge Conflicts:    Git can handle merge conflicts, which mean that it's OK for multiple people to work on the same file at the same time.</p> </li> <li> <p>Cheap Branches:    Git offers a lot of flexibility and opportunity for collaboration with branches. By using branches, developers can make changes in a safe sandbox.</p> </li> <li> <p>Ease of roll back:    his means that if you do make a mistake, even on an important branch like main, it's OK. You can easily revert that change, or roll back the branch pointer to the commit where everything was fine.</p> </li> </ul> Why Git is good for text files, but not so good for images? <p>Git stores changes in SHA hashes, which work by compressing text files. That makes Git a very good version control system (VCS) for software programming, but not so good for binary files like images or videos.</p>","tags":["Git"]},{"location":"tool/git/#git-init","title":"Git Init","text":"<pre><code>git init\n</code></pre> <p>It turns any directory into a Git repository. Git creates a hidden directory called <code>.git</code>. That directory stores all of the objects and refs that Git uses and creates as a part of your project's history. This hidden <code>.git</code> directory is what separates a regular directory from a Git repository.</p>","tags":["Git"]},{"location":"tool/git/#git-clone","title":"Git Clone","text":"<pre><code>git clone https://github.com/Kreal321/blog.git\n</code></pre> <p>The git clone command is used to create a copy of a remote Git repository on your local machine.</p> How to fix The remote end hung up unexpectedly while git cloning <p>Raising the postBuffer size by:</p> <pre><code>git config --global http.postBuffer 524288000\n</code></pre> <p>If it does not work, you can raise again:</p> <pre><code>git config --global http.postBuffer 1048576000\n</code></pre> <p>Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system. For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.</p>","tags":["Git"]},{"location":"tool/git/#git-log","title":"Git Log","text":"<p>Only show the first line of the commit message</p> <pre><code>git log --oneline\n</code></pre> <p>Show author date and commit date information</p> <pre><code>git log --pretty=fuller\n</code></pre> Author date and commit date are different? <p>Author date is the date when the author made the commit, and commit date is the date when the commit was committed to the repository.</p> <p>To change commit commit date and author date during git commit, you can use the following command:</p> <pre><code>GIT_COMMITTER_DATE=\"DATE\" git commit -m \"init commit\" --date=\"DATE\"\n</code></pre>","tags":["Git"]},{"location":"tool/git/#useful-links","title":"Useful Links","text":"<ul> <li>Installing Git Git</li> <li>Git Guide from GitHub</li> </ul>","tags":["Git"]},{"location":"tool/gitpod/","title":"GitPod","text":"<p>Gitpod is a cloud-based Integrated Development Environment (IDE) that allows developers to work on their projects in a pre-configured, containerized workspace that is accessible through a web browser.</p>","tags":["Tool","GitPod","IDE"]},{"location":"tool/gitpod/#prebuilding-and-workspace-image","title":"Prebuilding and Workspace Image","text":"<p>By default, Gitpod uses a standard Docker Image called <code>Workspace-Full</code> as the foundation for workspaces. Workspaces started based on this default image come pre-installed with Docker, Nix, Go, Java, Node.js, C/C++, Python, Ruby, Rust, Clojure as well as tools such as Homebrew, Tailscale, Nginx and several more.</p>","tags":["Tool","GitPod","IDE"]},{"location":"tool/gitpod/#using-public-docker-image","title":"Using Public Docker Image","text":".gitpod.yml<pre><code>image: node:buster\n</code></pre> <p>Note</p> <p>Gitpod supports Debian/Ubuntu based Docker images. Alpine images do not include libgcc and libstdc++ which breaks Visual Studio Code. </p>","tags":["Tool","GitPod","IDE"]},{"location":"tool/gitpod/#using-custom-docker-image","title":"Using Custom Docker Image","text":".gitpod.yml<pre><code>image:\n  file: .gitpod.Dockerfile\n</code></pre> .gitpod.Dockerfile<pre><code># Public Image\nFROM gitpod/workspace-full:latest\n\n# Install custom tools, runtime, etc.\nRUN brew install fzf\n</code></pre>","tags":["Tool","GitPod","IDE"]},{"location":"tool/shell/","title":"Shell","text":"<p>Shell is a program that takes commands from the keyboard and gives them to the operating system to perform. In the old days, it was the only user interface available on a Unix-like system such as Linux. Nowadays, we have graphical user interfaces (GUIs) in addition to command line interfaces (CLIs) such as the shell.</p>","tags":["bash","zsh"]},{"location":"tool/shell/#zsh-vs-bash","title":"Zsh vs Bash","text":"<p>Zsh is built on top of bash thus it has additional features. Zsh is the default shell for macOS and Kali Linux. Zsh provides the user with more flexibility by providing various features such as plug-in support, better customization, theme support, spelling correction, etc.</p>","tags":["bash","zsh"]},{"location":"tool/shell/#bash_profile-vs-bashrc","title":"Bash_profile vs Bashrc","text":"<p>Bashrc is executed each time you open a new terminal window, while bash_profile is executed only once when you log in to your account. This means that any changes you make to bashrc will take effect immediately, while changes to bash_profile will take effect only when you log out and log back in again.</p>","tags":["bash","zsh"]},{"location":"tool/shell/#order-of-operations","title":"Order of Operations","text":"<ul> <li>.zshenv (environment variables)</li> <li>.zprofile (login shell)</li> <li>.zshrc (interactive shell)</li> <li>.zlogin (login shell)</li> <li>.zlogout (when the shell exits)</li> </ul>","tags":["bash","zsh"]},{"location":"tool/ssh/","title":"PuTTY","text":"","tags":["Tool","SSH","PuTTY","Mac"]},{"location":"tool/ssh/#how-to-use-putty-on-mac","title":"How to use PuTTY on Mac","text":"<ol> <li> <p>Install PuTTY</p> <p>Install PuTTY using <code>brew</code> or <code>port</code>. This will also install the command-line version of puttygen (the PuTTY key generator tool).</p> <pre><code>brew install putty\n</code></pre> <p>Or</p> <pre><code>port install putty\n</code></pre> </li> <li> <p>Using PEM formate private key</p> <p>Convert the <code>.ppk</code> format private key to a standard <code>.pem</code> format private key</p> <pre><code>puttygen privatekey.ppk -O private-openssh -o privatekey.pem\n</code></pre> <p>Grant readable pression</p> <pre><code>chmod go-rw privatekey.pem\n</code></pre> </li> <li> <p>Use the key for login</p> <pre><code>ssh -i privatekey.pem user@hostname\n</code></pre> </li> </ol>","tags":["Tool","SSH","PuTTY","Mac"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#angular","title":"Angular","text":"<ul> <li>Angular Deployment</li> <li>Material Design</li> </ul>"},{"location":"tags/#angular-material-design","title":"Angular Material Design","text":"<ul> <li>Material Design</li> </ul>"},{"location":"tags/#bootstrap","title":"Bootstrap","text":"<ul> <li>Material Design</li> </ul>"},{"location":"tags/#cicd","title":"CI/CD","text":"<ul> <li>CI/CD</li> </ul>"},{"location":"tags/#deployment","title":"Deployment","text":"<ul> <li>Angular Deployment</li> </ul>"},{"location":"tags/#filter","title":"Filter","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#git","title":"Git","text":"<ul> <li>Git</li> </ul>"},{"location":"tags/#gitpod","title":"GitPod","text":"<ul> <li>GitPod</li> </ul>"},{"location":"tags/#ide","title":"IDE","text":"<ul> <li>GitPod</li> </ul>"},{"location":"tags/#jakarta-ee","title":"Jakarta EE","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#java","title":"Java","text":"<ul> <li>Java 8 Features</li> <li>Java SE Basic</li> <li>Java Full Stack Roadmap</li> </ul>"},{"location":"tags/#java-8","title":"Java 8","text":"<ul> <li>Java 8 Features</li> </ul>"},{"location":"tags/#java-se","title":"Java SE","text":"<ul> <li>Java SE Basic</li> </ul>"},{"location":"tags/#mac","title":"Mac","text":"<ul> <li>PuTTY</li> </ul>"},{"location":"tags/#oca","title":"OCA","text":"<ul> <li>Java SE Basic</li> </ul>"},{"location":"tags/#putty","title":"PuTTY","text":"<ul> <li>PuTTY</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Python Full Stack Roadmap</li> </ul>"},{"location":"tags/#roadmap","title":"Roadmap","text":"<ul> <li>Java Full Stack Roadmap</li> <li>Python Full Stack Roadmap</li> </ul>"},{"location":"tags/#ssh","title":"SSH","text":"<ul> <li>PuTTY</li> </ul>"},{"location":"tags/#servlet","title":"Servlet","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#spring-boot","title":"Spring Boot","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#spring-security","title":"Spring Security","text":"<ul> <li>Spring Security</li> </ul>"},{"location":"tags/#tool","title":"Tool","text":"<ul> <li>GitPod</li> <li>PuTTY</li> </ul>"},{"location":"tags/#bash","title":"bash","text":"<ul> <li>Shell</li> </ul>"},{"location":"tags/#zsh","title":"zsh","text":"<ul> <li>Shell</li> </ul>"}]}